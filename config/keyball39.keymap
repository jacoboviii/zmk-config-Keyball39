#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <input/processors.dtsi>

/ {
    // custom shift using mod-morph 

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <33 34 35 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 37 38 36>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 21 22 23 24 20 33 34 35 36 37 38>;
        };
    };

    trackball_listener {
        scroller {
            layers = <1>;
            input-processors = <&zip_xy_to_scroll_mapper &zip_scroll_scaler 1 10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            label = "Base";
            bindings = <
&kp Q             &kp W            &kp E         &kp R              &kp T                                &kp Y            &kp U               &kp I         &kp O             &kp P
&hml LEFT_META A  &hml LEFT_ALT S  &hml LCTRL D  &hml LEFT_SHIFT F  &kp G                                &kp H            &hmr RIGHT_SHIFT J  &hmr RCTRL K  &hmr RIGHT_ALT L  &hmr RIGHT_META SQT
&kp Z             &kp X            &kp C         &kp V              &kp B                                &kp N            &kp M               &kp COMMA     &kp DOT           &kp SLASH
&none             &none            &none         &lt 3 ESCAPE       &lt 1 SPACE  &lt 2 TAB  &lt 5 ENTER  &lt 4 BACKSPACE                                                      &lt 6 DELETE
            >;
        };

        nav {
            label = "Nav";
            bindings = <
&none     &none     &none      &none      &none                      &kp LS(LG(Z))  &kp LG(V)  &kp LG(C)  &kp LG(X)  &kp LG(Z)
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none                      &kp LEFT       &kp DOWN   &kp UP     &kp RIGHT  &caps_word
&none     &none     &none      &none      &none                      &kp HOME       &kp PG_DN  &kp PG_UP  &kp END    &kp INS
&none     &none     &none      &trans     &trans  &trans  &kp ENTER  &kp BSPC                                        &kp DELETE
            >;
        };

        mouse {
            label = "Mouse";
            bindings = <
&none     &none     &none      &none      &none                      &kp LS(LG(Z))   &kp LG(V)       &kp LG(C)     &kp LG(X)        &kp LG(Z)
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none                      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
&none     &none     &none      &none      &none                      &none           &none           &none         &none            &none
&none     &none     &none      &trans     &trans  &trans  &mkp RCLK  &mkp LCLK                                                      &mkp MCLK
            >;
        };

        media {
            label = "Media";
            bindings = <
&none     &none     &none      &none      &none                       &none         &none              &none            &none         &none
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none                       &kp C_PREV    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT    &bt BT_CLR
&none     &none     &none      &none      &none                       &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4
&none     &none     &none      &trans     &trans  &trans  &kp C_STOP  &kp C_PP                                                        &kp C_MUTE
            >;
        };

        num {
            label = "Num";
            bindings = <
&kp LBKT   &kp N7  &kp N8  &kp N9   &kp RBKT                      &none   &none      &none      &none     &none
&kp SEMI   &kp N4  &kp N5  &kp N6   &kp EQUAL                     &none   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp BSLH                      &none   &none      &none      &none     &none
&none      &none   &none   &kp DOT  &kp N0     &kp MINUS  &trans  &trans                                  &trans
            >;
        };

        sym {
            label = "Sym";
            bindings = <
&kp LEFT_BRACE  &kp AMPS    &kp ASTRK    &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE                           &none   &none      &none      &none     &none
&kp COLON       &kp DOLLAR  &kp PERCENT  &kp CARET             &kp PLUS                                  &none   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp TILDE       &kp EXCL    &kp AT       &kp POUND             &kp PIPE                                  &none   &none      &none      &none     &none
&none           &none       &none        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDER  &trans  &trans                                  &trans
            >;
        };

        fun {
            label = "Fun";
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9      &kp PSCRN                         &none   &none      &none      &none     &none
&kp F11  &kp F4  &kp F5  &kp F6      &kp SLCK                          &none   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp F10  &kp F1  &kp F2  &kp F3      &kp PAUSE_BREAK                   &none   &none      &none      &none     &none
&none    &none   &none   &kp ESCAPE  &kp SPACE        &kp TAB  &trans  &trans                                  &trans
            >;
        };
    };
};
